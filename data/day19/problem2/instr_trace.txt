addi 1 16 1     // ip = ip + 16 
seti 1 5 3      // r[3] = 1                 --- Beginning of loop B
seti 1 7 5      // r[5] = 1                 --- Beginning of loop A
mulr 3 5 4      // r[4] = r[3] * r[5]
eqrr 4 2 4      // r[4] = r[4] == r[2]
addr 4 1 1      // ip = ip + r[4]           --- This skips the next line if previous line is true
addi 1 1 1      // ip = ip + 1              --- JUMP, Skip next instr
addr 3 0 0      // r[0] = r[3] + r[0]       --- TOTAL: Adds two factors together
addi 5 1 5      // r[5] = r[5] + 1
gtrr 5 2 4      // r[4] = r[5] > r[2]
addr 1 4 1      // ip = ip + r[4]           --- This skips the next line if previous line is true
seti 2 1 1      // ip = 2                   --- End of loop A (This loops back to 2)
addi 3 1 3      // r[3] = r[3] + 1          
gtrr 3 2 4      // r[4] = r[3] > r[2]       
addr 4 1 1      // ip = r[4] + ip           --- This skips the next line if previous line is true
seti 1 3 1      // ip = 1                   --- End of loop B (This loops back to 1)
mulr 1 1 1      // ip = ip * ip             --- JUMP, Also entry jump from ip=0
addi 2 2 2      // r[2] = r[2] + 2
mulr 2 2 2      // r[2] = r[2] * r[2]
mulr 1 2 2      // r[2] = ip * r[2]
muli 2 11 2     // r[2] = r[2] * 11
addi 4 7 4      // r[4] = r[4] + 7
mulr 4 1 4      // r[4] = r[4] * ip
addi 4 13 4     // r[4] = r[4] + 13
addr 2 4 2      // r[2] = r[2] + r[4]
addr 1 0 1      // ip = ip + r[0]           --- JUMP
seti 0 9 1      // ip = 0                   --- JUMP, To start
setr 1 0 4      // r[4] = r[1] + r[0]
mulr 4 1 4      // r[4] = r[4] * r[1]
addr 1 4 4      // r[4] = ip + r[4]
mulr 1 4 4      // r[4] = ip * r[4]
muli 4 14 4     // r[4] = r[4] * 14
mulr 4 1 4      // r[4] = r[4] * ip
addr 2 4 2      // r[2] = r[4] + r[2]
seti 0 2 0      // r[0] = 0
seti 0 0 1      // ip = 0                   --- JUMP, To start